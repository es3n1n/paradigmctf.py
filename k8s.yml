apiVersion: v1
kind: ServiceAccount
metadata:
  name: ctf-server
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: default
  name: ctf-server
rules:
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "watch", "list", "create", "delete", "deletecollection", "patch", "update"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: ctf-server
  namespace: default
subjects:
- kind: ServiceAccount
  name: ctf-server
  namespace: default
roleRef:
  kind: Role
  name: ctf-server
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: v1
kind: Service
metadata:
  name: eth
spec:
  type: NodePort
  selector:
    app: blockchain-infra
  ports:
  - name: https
    port: 8545
    targetPort: 8545
---
apiVersion: v1
kind: Pod
metadata:
  name: blockchain-infra
  labels:
    app: blockchain-infra
spec:
  serviceAccountName: ctf-server
  containers:
  - name: redis
    image: redis/redis-stack:latest
    env:
    - name: REDIS_ARGS
      value: --save 60 1
    volumeMounts:
    - name: database
      mountPath: /data
    ports:
    - containerPort: 6379
    readinessProbe:
      tcpSocket:
        port: 6379
    resources:
      requests:
        cpu: 1m
        memory: 1Mi
      limits:
        cpu: "4"
        memory: 4Gi

  - name: anvil-proxy
    image: ghcr.io/es3n1n/paradigmctf.py:latest
    command: ["uvicorn", "--host", "0.0.0.0", "--port", "8545", "--workers", "4", "ctf_server:anvil_proxy"]
    env:
    - name: DATABASE
      value: redis
    - name: REDIS_URL
      value: redis://127.0.0.1:6379/0
    ports:
    - containerPort: 8545
    readinessProbe:
      tcpSocket:
        port: 8545
    imagePullPolicy: IfNotPresent
    securityContext:
      allowPrivilegeEscalation: false
    resources:
      requests:
        cpu: 1m
        memory: 1Mi
      limits:
        cpu: "4"
        memory: 4Gi

  - name: orchestrator
    image: ghcr.io/es3n1n/paradigmctf.py:latest
    command: ["uvicorn", "--host", "0.0.0.0", "--port", "7283", "ctf_server:orchestrator", "--workers", "4"]
    env:
    - name: BACKEND
      value: kubernetes
    - name: DATABASE
      value: redis
    - name: REDIS_URL
      value: redis://127.0.0.1:6379/0
    ports:
    - containerPort: 7283
    readinessProbe:
      tcpSocket:
        port: 7283
    imagePullPolicy: IfNotPresent
    securityContext:
      allowPrivilegeEscalation: false
    resources:
      requests:
        cpu: 1m
        memory: 1Mi
      limits:
        cpu: "4"
        memory: 4Gi

  volumes:
  - name: database
    emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: orchestrator
spec:
  selector:
    app: blockchain-infra
  ports:
  - name: http
    port: 7283
    targetPort: 7283
  type: ClusterIP
